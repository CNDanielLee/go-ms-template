// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"goms/app/user/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthReply    = user.AuthReply
	AuthReq      = user.AuthReq
	CurrentReply = user.CurrentReply
	CurrentReq   = user.CurrentReq

	User interface {
		Login(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthReply, error)
		Register(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthReply, error)
		Current(ctx context.Context, in *CurrentReq, opts ...grpc.CallOption) (*CurrentReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Current(ctx context.Context, in *CurrentReq, opts ...grpc.CallOption) (*CurrentReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Current(ctx, in, opts...)
}
