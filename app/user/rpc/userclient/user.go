// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"goms/app/user/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthReq         = user.AuthReq
	AuthResp        = user.AuthResp
	UserCurrentReq  = user.UserCurrentReq
	UserCurrentResp = user.UserCurrentResp

	User interface {
		AuthLogin(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
		AuthRegister(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
		UserCurrent(ctx context.Context, in *UserCurrentReq, opts ...grpc.CallOption) (*UserCurrentResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) AuthLogin(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AuthLogin(ctx, in, opts...)
}

func (m *defaultUser) AuthRegister(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AuthRegister(ctx, in, opts...)
}

func (m *defaultUser) UserCurrent(ctx context.Context, in *UserCurrentReq, opts ...grpc.CallOption) (*UserCurrentResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserCurrent(ctx, in, opts...)
}
