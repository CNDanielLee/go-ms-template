// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"goms/service/order/rpc/internal/logic"
	"goms/service/order/rpc/internal/svc"
	"goms/service/order/rpc/pb/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) List(ctx context.Context, in *order.ListReq) (*order.ListReply, error) {
	l := logic.NewListLogic(ctx, s.svcCtx)
	return l.List(in)
}

func (s *OrderServer) Detail(ctx context.Context, in *order.UserIdReq) (*order.DetailReply, error) {
	l := logic.NewDetailLogic(ctx, s.svcCtx)
	return l.Detail(in)
}

// DTM
func (s *OrderServer) Create(ctx context.Context, in *order.CreateReq) (*order.Empty, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

func (s *OrderServer) CreateRollback(ctx context.Context, in *order.CreateReq) (*order.Empty, error) {
	l := logic.NewCreateRollbackLogic(ctx, s.svcCtx)
	return l.CreateRollback(in)
}

// Internal
func (s *OrderServer) CheckPaymentTimeout(ctx context.Context, in *order.IdReq) (*order.Empty, error) {
	l := logic.NewCheckPaymentTimeoutLogic(ctx, s.svcCtx)
	return l.CheckPaymentTimeout(in)
}
